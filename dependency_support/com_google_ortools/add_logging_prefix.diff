diff --git ortools/base/logging.cc ortools/base/logging.cc
index a10b6bd405..f3d5670dc1 100644
--- ortools/base/logging.cc
+++ ortools/base/logging.cc
@@ -20,7 +20,7 @@
 #include "absl/log/globals.h"
 #include "absl/log/initialize.h"
 
-ABSL_FLAG(bool, logtostderr, false, "no op compatibility flag");
+ABSL_FLAG(bool, ortools_logtostderr, false, "no op compatibility flag");
 
 namespace operations_research {
 
diff --git ortools/base/vlog_is_on.cc ortools/base/vlog_is_on.cc
index 15decaa841..21a6503aed 100644
--- ortools/base/vlog_is_on.cc
+++ ortools/base/vlog_is_on.cc
@@ -23,16 +23,16 @@
 #include "absl/flags/flag.h"
 #include "absl/synchronization/mutex.h"
 
-ABSL_FLAG(int, v, 0,
+ABSL_FLAG(int, ortools_v, 0,
           "Show all VLOG(m) messages for m <= this."
-          " Overridable by --vmodule.");
+          " Overridable by --ortools_vmodule.");
 
-ABSL_FLAG(std::string, vmodule, "",
+ABSL_FLAG(std::string, ortools_vmodule, "",
           "per-module verbose level."
           " Argument is a comma-separated list of <module name>=<log level>."
           " <module name> is a glob pattern, matched against the filename base"
           " (that is, name ignoring .cc/.h./-inl.h)."
-          " <log level> overrides any value given by --v.");
+          " <log level> overrides any value given by --ortools_v.");
 
 namespace google {
 
@@ -80,7 +80,7 @@ using logging_internal::SafeFNMatch_;
 
 int32_t kLogSiteUninitialized = 1000;
 
-// List of per-module log levels from absl::GetFlag(FLAGS_vmodule).
+// List of per-module log levels from absl::GetFlag(FLAGS_ortools_vmodule).
 // Once created each element is never deleted/modified
 // except for the vlog_level: other threads will read VModuleInfo blobs
 // w/o locks and we'll store pointers to vlog_level at VLOG locations
@@ -109,7 +109,7 @@ static void VLOG2Initializer() {
   // Can now parse --vmodule flag and initialize mapping of module-specific
   // logging levels.
   inited_vmodule = false;
-  const std::string vmodule_flag = absl::GetFlag(FLAGS_vmodule);
+  const std::string vmodule_flag = absl::GetFlag(FLAGS_ortools_vmodule);
   const char* vmodule = vmodule_flag.c_str();
   const char* sep;
   VModuleInfo* head = nullptr;
@@ -141,7 +141,7 @@ static void VLOG2Initializer() {
 
 // This can be called very early, so we use SpinLock and RAW_VLOG here.
 int SetVLOGLevel(const char* module_pattern, int log_level) {
-  int result = absl::GetFlag(FLAGS_v);
+  int result = absl::GetFlag(FLAGS_ortools_v);
   int const pattern_len = strlen(module_pattern);
   bool found = false;
   {
@@ -220,8 +220,9 @@ bool InitVLOG3__(int32_t** vmodule_info, bool* initialized, const char* fname,
   // restore the errno in case something recoverable went wrong during
   // the initialization of the VLOG mechanism (see above note "protect the..")
   errno = old_errno;
-  return *vmodule_info == nullptr ? absl::GetFlag(FLAGS_v) >= verbose_level
-                                  : **vmodule_info >= verbose_level;
+  return *vmodule_info == nullptr
+             ? absl::GetFlag(FLAGS_ortools_v) >= verbose_level
+             : **vmodule_info >= verbose_level;
 }
 
 }  // namespace google
diff --git ortools/base/vlog_is_on.h ortools/base/vlog_is_on.h
index c83e12956f..2dc3938c9a 100644
--- ortools/base/vlog_is_on.h
+++ ortools/base/vlog_is_on.h
@@ -18,7 +18,7 @@
 #include "absl/flags/declare.h"
 #include "absl/log/log.h"
 
-ABSL_DECLARE_FLAG(int, v);
+ABSL_DECLARE_FLAG(int, ortools_v);
 
 namespace google {
 
@@ -26,9 +26,9 @@ namespace google {
 // We emit an anonymous static int* variable at every VLOG_IS_ON(n) site.
 // (Normally) the first time every VLOG_IS_ON(n) site is hit,
 // we determine what variable will dynamically control logging at this site:
-// it's either absl::GetFlag(FLAGS_v) or an appropriate internal variable
-// matching the current source file that represents results of
-// parsing of --vmodule flag and/or SetVLOGLevel calls.
+// it's either absl::GetFlag(FLAGS_ortools_v) or an appropriate internal
+// variable matching the current source file that represents results of parsing
+// of --vmodule flag and/or SetVLOGLevel calls.
 #define VLOG_IS_ON(verboselevel)                                        \
   __extension__({                                                       \
     static bool vmodule_initialized__ = false;                          \
@@ -36,15 +36,17 @@ namespace google {
     int32_t verbose_level__ = (verboselevel);                           \
     (vmodule_initialized__                                              \
          ? (vmodule_info__ == nullptr                                   \
-                ? absl::GetFlag(FLAGS_v) >= verbose_level__             \
+                ? absl::GetFlag(FLAGS_ortools_v) >= verbose_level__     \
                 : *vmodule_info__ >= verbose_level__)                   \
          : google::InitVLOG3__(&vmodule_info__, &vmodule_initialized__, \
                                __FILE__, verbose_level__));             \
   })
 #else
-// GNU extensions not available, so we do not support --vmodule.
-// Dynamic value of absl::GetFlag(FLAGS_v) always controls the logging level.
-#define VLOG_IS_ON(verboselevel) (absl::GetFlag(FLAGS_v) >= (verboselevel))
+// GNU extensions not available, so we do not support --ortools_vmodule.
+// Dynamic value of absl::GetFlag(FLAGS_ortools_v) always controls the logging
+// level.
+#define VLOG_IS_ON(verboselevel) \
+  (absl::GetFlag(FLAGS_ortools_v) >= (verboselevel))
 #endif
 
 // Set VLOG(_IS_ON) level for module_pattern to log_level.
